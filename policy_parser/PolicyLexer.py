# Generated from Policy.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,26,247,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,
        5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,10,1,10,
        1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,
        1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,
        1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,19,3,19,139,8,19,1,19,4,19,142,8,19,11,19,12,19,143,1,20,
        3,20,147,8,20,1,20,4,20,150,8,20,11,20,12,20,151,1,20,1,20,4,20,
        156,8,20,11,20,12,20,157,3,20,160,8,20,1,21,1,21,1,21,1,21,4,21,
        166,8,21,11,21,12,21,167,1,21,1,21,1,22,1,22,1,22,1,22,1,22,3,22,
        177,8,22,3,22,179,8,22,1,22,1,22,1,22,1,22,3,22,185,8,22,1,23,1,
        23,3,23,189,8,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,
        26,5,26,201,8,26,10,26,12,26,204,9,26,1,27,1,27,1,27,1,27,1,27,1,
        27,3,27,212,8,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,4,
        32,223,8,32,11,32,12,32,224,1,32,1,32,1,33,3,33,230,8,33,1,33,1,
        33,4,33,234,8,33,11,33,12,33,235,1,33,1,33,1,34,1,34,4,34,242,8,
        34,11,34,12,34,243,1,34,1,34,0,0,35,1,1,3,2,5,0,7,0,9,0,11,0,13,
        0,15,0,17,0,19,0,21,0,23,3,25,4,27,5,29,6,31,7,33,8,35,9,37,10,39,
        11,41,12,43,13,45,14,47,15,49,16,51,17,53,18,55,19,57,20,59,21,61,
        22,63,23,65,24,67,25,69,26,1,0,6,2,0,65,90,97,122,1,0,48,57,2,0,
        43,43,45,45,3,0,42,43,45,45,47,47,2,0,9,9,32,32,2,0,10,10,13,13,
        264,0,1,1,0,0,0,0,3,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
        0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
        0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,
        0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
        0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
        0,0,69,1,0,0,0,1,71,1,0,0,0,3,73,1,0,0,0,5,75,1,0,0,0,7,77,1,0,0,
        0,9,79,1,0,0,0,11,81,1,0,0,0,13,84,1,0,0,0,15,87,1,0,0,0,17,90,1,
        0,0,0,19,93,1,0,0,0,21,95,1,0,0,0,23,97,1,0,0,0,25,100,1,0,0,0,27,
        105,1,0,0,0,29,109,1,0,0,0,31,112,1,0,0,0,33,116,1,0,0,0,35,121,
        1,0,0,0,37,127,1,0,0,0,39,138,1,0,0,0,41,146,1,0,0,0,43,161,1,0,
        0,0,45,171,1,0,0,0,47,186,1,0,0,0,49,190,1,0,0,0,51,193,1,0,0,0,
        53,196,1,0,0,0,55,211,1,0,0,0,57,213,1,0,0,0,59,215,1,0,0,0,61,217,
        1,0,0,0,63,219,1,0,0,0,65,222,1,0,0,0,67,233,1,0,0,0,69,239,1,0,
        0,0,71,72,5,46,0,0,72,2,1,0,0,0,73,74,5,61,0,0,74,4,1,0,0,0,75,76,
        7,0,0,0,76,6,1,0,0,0,77,78,7,1,0,0,78,8,1,0,0,0,79,80,5,95,0,0,80,
        10,1,0,0,0,81,82,5,61,0,0,82,83,5,61,0,0,83,12,1,0,0,0,84,85,5,33,
        0,0,85,86,5,61,0,0,86,14,1,0,0,0,87,88,5,62,0,0,88,89,5,61,0,0,89,
        16,1,0,0,0,90,91,5,60,0,0,91,92,5,61,0,0,92,18,1,0,0,0,93,94,5,62,
        0,0,94,20,1,0,0,0,95,96,5,60,0,0,96,22,1,0,0,0,97,98,5,73,0,0,98,
        99,5,102,0,0,99,24,1,0,0,0,100,101,5,84,0,0,101,102,5,104,0,0,102,
        103,5,101,0,0,103,104,5,110,0,0,104,26,1,0,0,0,105,106,5,97,0,0,
        106,107,5,110,0,0,107,108,5,100,0,0,108,28,1,0,0,0,109,110,5,111,
        0,0,110,111,5,114,0,0,111,30,1,0,0,0,112,113,5,110,0,0,113,114,5,
        111,0,0,114,115,5,116,0,0,115,32,1,0,0,0,116,117,5,116,0,0,117,118,
        5,114,0,0,118,119,5,117,0,0,119,120,5,101,0,0,120,34,1,0,0,0,121,
        122,5,115,0,0,122,123,5,105,0,0,123,124,5,110,0,0,124,125,5,99,0,
        0,125,126,5,101,0,0,126,36,1,0,0,0,127,128,5,121,0,0,128,129,5,101,
        0,0,129,130,5,115,0,0,130,131,5,116,0,0,131,132,5,101,0,0,132,133,
        5,114,0,0,133,134,5,100,0,0,134,135,5,97,0,0,135,136,5,121,0,0,136,
        38,1,0,0,0,137,139,7,2,0,0,138,137,1,0,0,0,138,139,1,0,0,0,139,141,
        1,0,0,0,140,142,3,7,3,0,141,140,1,0,0,0,142,143,1,0,0,0,143,141,
        1,0,0,0,143,144,1,0,0,0,144,40,1,0,0,0,145,147,7,2,0,0,146,145,1,
        0,0,0,146,147,1,0,0,0,147,149,1,0,0,0,148,150,3,7,3,0,149,148,1,
        0,0,0,150,151,1,0,0,0,151,149,1,0,0,0,151,152,1,0,0,0,152,159,1,
        0,0,0,153,155,5,46,0,0,154,156,3,7,3,0,155,154,1,0,0,0,156,157,1,
        0,0,0,157,155,1,0,0,0,157,158,1,0,0,0,158,160,1,0,0,0,159,153,1,
        0,0,0,159,160,1,0,0,0,160,42,1,0,0,0,161,165,5,34,0,0,162,166,3,
        5,2,0,163,166,3,7,3,0,164,166,3,9,4,0,165,162,1,0,0,0,165,163,1,
        0,0,0,165,164,1,0,0,0,166,167,1,0,0,0,167,165,1,0,0,0,167,168,1,
        0,0,0,168,169,1,0,0,0,169,170,5,34,0,0,170,44,1,0,0,0,171,178,3,
        47,23,0,172,173,5,58,0,0,173,176,3,49,24,0,174,175,5,58,0,0,175,
        177,3,51,25,0,176,174,1,0,0,0,176,177,1,0,0,0,177,179,1,0,0,0,178,
        172,1,0,0,0,178,179,1,0,0,0,179,184,1,0,0,0,180,181,5,97,0,0,181,
        185,5,109,0,0,182,183,5,112,0,0,183,185,5,109,0,0,184,180,1,0,0,
        0,184,182,1,0,0,0,184,185,1,0,0,0,185,46,1,0,0,0,186,188,3,7,3,0,
        187,189,3,7,3,0,188,187,1,0,0,0,188,189,1,0,0,0,189,48,1,0,0,0,190,
        191,3,7,3,0,191,192,3,7,3,0,192,50,1,0,0,0,193,194,3,7,3,0,194,195,
        3,7,3,0,195,52,1,0,0,0,196,202,3,5,2,0,197,201,3,5,2,0,198,201,3,
        7,3,0,199,201,3,9,4,0,200,197,1,0,0,0,200,198,1,0,0,0,200,199,1,
        0,0,0,201,204,1,0,0,0,202,200,1,0,0,0,202,203,1,0,0,0,203,54,1,0,
        0,0,204,202,1,0,0,0,205,212,3,11,5,0,206,212,3,13,6,0,207,212,3,
        15,7,0,208,212,3,17,8,0,209,212,3,19,9,0,210,212,3,21,10,0,211,205,
        1,0,0,0,211,206,1,0,0,0,211,207,1,0,0,0,211,208,1,0,0,0,211,209,
        1,0,0,0,211,210,1,0,0,0,212,56,1,0,0,0,213,214,7,3,0,0,214,58,1,
        0,0,0,215,216,5,40,0,0,216,60,1,0,0,0,217,218,5,41,0,0,218,62,1,
        0,0,0,219,220,5,44,0,0,220,64,1,0,0,0,221,223,7,4,0,0,222,221,1,
        0,0,0,223,224,1,0,0,0,224,222,1,0,0,0,224,225,1,0,0,0,225,226,1,
        0,0,0,226,227,6,32,0,0,227,66,1,0,0,0,228,230,5,13,0,0,229,228,1,
        0,0,0,229,230,1,0,0,0,230,231,1,0,0,0,231,234,5,10,0,0,232,234,5,
        13,0,0,233,229,1,0,0,0,233,232,1,0,0,0,234,235,1,0,0,0,235,233,1,
        0,0,0,235,236,1,0,0,0,236,237,1,0,0,0,237,238,6,33,0,0,238,68,1,
        0,0,0,239,241,5,35,0,0,240,242,8,5,0,0,241,240,1,0,0,0,242,243,1,
        0,0,0,243,241,1,0,0,0,243,244,1,0,0,0,244,245,1,0,0,0,245,246,6,
        34,0,0,246,70,1,0,0,0,21,0,138,143,146,151,157,159,165,167,176,178,
        184,188,200,202,211,224,229,233,235,243,1,6,0,0
    ]

class PolicyLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    IF = 3
    THEN = 4
    AND = 5
    OR = 6
    NOT = 7
    TRUE = 8
    SINCE = 9
    YESTERDAY = 10
    INTEGER = 11
    REAL_NUMBER = 12
    STRING = 13
    TIME = 14
    HOUR = 15
    MINUTE = 16
    SECOND = 17
    IDENTIFIER = 18
    RELATIONAL_OP = 19
    ARITHMATIC_OP = 20
    OPEN_PAREN = 21
    CLOSED_PAREN = 22
    COMMA = 23
    WHITESPACE = 24
    NEWLINE = 25
    COMMENTS = 26

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'.'", "'='", "'If'", "'Then'", "'and'", "'or'", "'not'", "'true'", 
            "'since'", "'yesterday'", "'('", "')'", "','" ]

    symbolicNames = [ "<INVALID>",
            "IF", "THEN", "AND", "OR", "NOT", "TRUE", "SINCE", "YESTERDAY", 
            "INTEGER", "REAL_NUMBER", "STRING", "TIME", "HOUR", "MINUTE", 
            "SECOND", "IDENTIFIER", "RELATIONAL_OP", "ARITHMATIC_OP", "OPEN_PAREN", 
            "CLOSED_PAREN", "COMMA", "WHITESPACE", "NEWLINE", "COMMENTS" ]

    ruleNames = [ "T__0", "T__1", "LETTER", "DIGIT", "UNDERSCORE", "EQ", 
                  "NE", "GE", "LE", "GT", "LT", "IF", "THEN", "AND", "OR", 
                  "NOT", "TRUE", "SINCE", "YESTERDAY", "INTEGER", "REAL_NUMBER", 
                  "STRING", "TIME", "HOUR", "MINUTE", "SECOND", "IDENTIFIER", 
                  "RELATIONAL_OP", "ARITHMATIC_OP", "OPEN_PAREN", "CLOSED_PAREN", 
                  "COMMA", "WHITESPACE", "NEWLINE", "COMMENTS" ]

    grammarFileName = "Policy.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


